; tries to follow the player

; [0 - 3] direction scores
; [4 - 5] pos. considered
; [6 - 7] repeated moves (dir, num)
; [8] scratch for cons. dir
; d - direction
; e - best dir
; f - num of valid dirs, then best score
; g - banned dir
; h - opp. dir

            mov     d, 0    ; first direction to try
            mov     f, 0    ; number of valid directions

; compute the pos for this direction
sc_loop:    get_my_ix
            get_gh_cur_pos
            jgt     $pos_1, d, 0
            sub     b, 1
            jeq     $st_pos, 0, 0
pos_1:      jgt     $pos_2, d, 1
            add     a, 1
            jeq     $st_pos, 0, 0
pos_2:      jgt     $pos_3, d, 2
            add     b, 1
            jeq     $st_pos, 0, 0
pos_3:      sub     a, 1
st_pos:     mov     [4], a
            mov     [5], b

; check if map square is not a wall
            get_map_sq
            jgt     $not_wall, a, 0
            mov     [d], 255
            jeq     $sc_loop_x, 0, 0
not_wall:   add     f, 1

; find distance for this pos
; TODO? handle large maps - will overflow
            get_lm_1_pos
            mov     g, [4]
            mov     h, [5]
            jlt     $ga, a, g
            sub     a, g
            jeq     $ag_done, 0, 0
ga:         sub     g, a
            mov     a, g
ag_done:    jlt     $hb, b, h
            sub     b, h
            jeq     $bh_done, 0, 0
hb:         sub     h, b
            mov     b, h
bh_done:    add     a, b

; run away if frightened
            mov     h, a
            get_my_ix
            get_gh_cur_st
            jeq     $frightened, a, 1
            jeq     $write_dist, 0, 0
frightened: mov     g, 255
            sub     g, h
            mov     h, g

; write distance
write_dist: mov     a, h
            mov     [d], a

sc_loop_x:  add     d, 1
            jlt     $sc_loop, d, 4      ; checked all immediate directions

; pick the best direction
            jlt     $halt, f, 3         ; no real choice here

            mov     e, 255              ; best so far
            mov     f, 255              ; score of best so far
            mov     c, 0

            get_my_ix
            get_gh_cur_st

            mov     h, b
            add     h, 2
            jlt     $pc_loop, h, 4
            sub     h, 4

            mov     g, 4
            jlt     $pc_loop, [7], 4
            mov     g, [6]

; main loop for picking best distance
pc_loop:    get_my_ix
check_ix:   jlt     $norm_ix, a, 4
            sub     a, 4
            jeq     $check_ix, 0, 0
norm_ix:    mov     d, a
            add     d, c
            jlt     $d_is_ok, d, 4
            sub     d, 4
d_is_ok:    jeq     $pc_loop_x, [d], 255
            jeq     $pc_loop_x, d, h        ; cannot go in the opposite direction
            mov     [8], d
            jlt     $check_rd, [8], 2
            sub     [8], 2
check_rd:   jeq     $pc_loop_x, g, [8]      ; check for many repeated moves in the same direction
            jgt     $pc_loop_x, [d], f
            mov     e, d
            mov     f, [d]

pc_loop_x:  add     c, 1
            jlt     $pc_loop, c, 4

; TODO? Figure out how the heck does that happen?
            jgt     $halt, e, 3     ; WHOA! that really shouldn't happen
            mov     a, e
            set_dir

            jlt     $check_dir, a, 2
            sub     a, 2
check_dir:  jeq     $inc_cnt, a, [6]
            mov     [6], a
            mov     [7], 1
            jeq     $inc_done, 0, 0
inc_cnt:    inc     [7]
inc_done:   mov     a, a        ; nop

;; DEBUG
;            mov     a, [6]
;            mov     b, [7]
;            mov     c, 0
;            mov     d, 0
;            debug

;; DEBUG
;            mov     a, [0]
;            mov     b, [1]
;            mov     c, [2]
;            mov     d, [3]
;            debug

halt:       hlt

